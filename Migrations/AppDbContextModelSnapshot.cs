// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using express_website.Models;

#nullable disable

namespace express_website.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("express_website.Models.AlanClass", b =>
                {
                    b.Property<int>("AlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlanId"));

                    b.Property<string>("AlanAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElemanModeliId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.HasKey("AlanId");

                    b.HasIndex("ElemanModeliId");

                    b.ToTable("Alan");
                });

            modelBuilder.Entity("express_website.Models.AltBaslikClass", b =>
                {
                    b.Property<int>("AltBaslikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AltBaslikId"));

                    b.Property<string>("AltBaslikAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaslikId")
                        .HasColumnType("int");

                    b.HasKey("AltBaslikId");

                    b.HasIndex("BaslikId");

                    b.ToTable("AltBaslik");
                });

            modelBuilder.Entity("express_website.Models.BaslikClass", b =>
                {
                    b.Property<int>("BaslikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaslikId"));

                    b.Property<string>("BaslikAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.HasKey("BaslikId");

                    b.HasIndex("KategoriId");

                    b.ToTable("Baslik");
                });

            modelBuilder.Entity("express_website.Models.BlogClass", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogBaslik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlogMetin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BlogTarih")
                        .HasColumnType("date");

                    b.HasKey("BlogId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("express_website.Models.ElemanClass", b =>
                {
                    b.Property<int>("ElemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElemanId"));

                    b.Property<int>("AltBaslikId")
                        .HasColumnType("int");

                    b.Property<string>("ElemanAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElemanMetin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElemanId");

                    b.HasIndex("AltBaslikId");

                    b.ToTable("Eleman");
                });

            modelBuilder.Entity("express_website.Models.ElemanModeliClass", b =>
                {
                    b.Property<int>("ElemanModeliId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElemanModeliId"));

                    b.Property<int>("ElemanId")
                        .HasColumnType("int");

                    b.Property<string>("ElemanModeliAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FiyatBilgisi1")
                        .HasColumnType("int");

                    b.Property<int?>("FiyatBilgisi2")
                        .HasColumnType("int");

                    b.HasKey("ElemanModeliId");

                    b.HasIndex("ElemanId");

                    b.ToTable("ElemanModeli");
                });

            modelBuilder.Entity("express_website.Models.HakkimizdaClass", b =>
                {
                    b.Property<int>("HakkimizdaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HakkimizdaId"));

                    b.Property<string>("HakkimizdaMetin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HakkimizdaId");

                    b.ToTable("Hakkimizda");
                });

            modelBuilder.Entity("express_website.Models.HucreClass", b =>
                {
                    b.Property<int>("HucreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HucreId"));

                    b.Property<int>("AlanId")
                        .HasColumnType("int");

                    b.Property<string>("HucreMetin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HucreId");

                    b.HasIndex("AlanId");

                    b.ToTable("Hucre");
                });

            modelBuilder.Entity("express_website.Models.IletisimClass", b =>
                {
                    b.Property<int>("IletisimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IletisimId"));

                    b.Property<string>("IletisimAdSoyad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimKonu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimMesaj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IletisimId");

                    b.ToTable("Iletisim");
                });

            modelBuilder.Entity("express_website.Models.KategoriClass", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"));

                    b.Property<string>("KategoriAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KategoriMetin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriId");

                    b.ToTable("Kategori");
                });

            modelBuilder.Entity("express_website.Models.ProjeClass", b =>
                {
                    b.Property<int>("ProjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjeId"));

                    b.Property<string>("ProjeAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProjeGorsel")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ProjeId");

                    b.ToTable("Proje");
                });

            modelBuilder.Entity("express_website.Models.ReferansClass", b =>
                {
                    b.Property<int>("ReferansId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReferansId"));

                    b.Property<byte[]>("ReferansGorsel")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ReferansId");

                    b.ToTable("Referans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("express_website.Models.AlanClass", b =>
                {
                    b.HasOne("express_website.Models.ElemanModeliClass", "ElemanModeli")
                        .WithMany("AlanListe")
                        .HasForeignKey("ElemanModeliId");

                    b.Navigation("ElemanModeli");
                });

            modelBuilder.Entity("express_website.Models.AltBaslikClass", b =>
                {
                    b.HasOne("express_website.Models.BaslikClass", "Baslik")
                        .WithMany("AltBaslikListe")
                        .HasForeignKey("BaslikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Baslik");
                });

            modelBuilder.Entity("express_website.Models.BaslikClass", b =>
                {
                    b.HasOne("express_website.Models.KategoriClass", "Kategori")
                        .WithMany("BaslikListe")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("express_website.Models.ElemanClass", b =>
                {
                    b.HasOne("express_website.Models.AltBaslikClass", "AltBaslik")
                        .WithMany("ElemanListe")
                        .HasForeignKey("AltBaslikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AltBaslik");
                });

            modelBuilder.Entity("express_website.Models.ElemanModeliClass", b =>
                {
                    b.HasOne("express_website.Models.ElemanClass", "Eleman")
                        .WithMany("ElemanModeliListe")
                        .HasForeignKey("ElemanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eleman");
                });

            modelBuilder.Entity("express_website.Models.HucreClass", b =>
                {
                    b.HasOne("express_website.Models.AlanClass", "Alan")
                        .WithMany("HucreListe")
                        .HasForeignKey("AlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alan");
                });

            modelBuilder.Entity("express_website.Models.AlanClass", b =>
                {
                    b.Navigation("HucreListe");
                });

            modelBuilder.Entity("express_website.Models.AltBaslikClass", b =>
                {
                    b.Navigation("ElemanListe");
                });

            modelBuilder.Entity("express_website.Models.BaslikClass", b =>
                {
                    b.Navigation("AltBaslikListe");
                });

            modelBuilder.Entity("express_website.Models.ElemanClass", b =>
                {
                    b.Navigation("ElemanModeliListe");
                });

            modelBuilder.Entity("express_website.Models.ElemanModeliClass", b =>
                {
                    b.Navigation("AlanListe");
                });

            modelBuilder.Entity("express_website.Models.KategoriClass", b =>
                {
                    b.Navigation("BaslikListe");
                });
#pragma warning restore 612, 618
        }
    }
}
